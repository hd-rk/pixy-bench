// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cmd/pb/proxy.proto

package mlisa

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ControlMessagePullRequest struct {
	// The actual control-response message payload(s) for earlier
	// control-request messages.
	//
	MessagePayloads      [][]byte `protobuf:"bytes,1,rep,name=message_payloads,json=messagePayloads,proto3" json:"message_payloads,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ControlMessagePullRequest) Reset()         { *m = ControlMessagePullRequest{} }
func (m *ControlMessagePullRequest) String() string { return proto.CompactTextString(m) }
func (*ControlMessagePullRequest) ProtoMessage()    {}
func (*ControlMessagePullRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_proxy_e56ba876533ea36b, []int{0}
}
func (m *ControlMessagePullRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlMessagePullRequest.Unmarshal(m, b)
}
func (m *ControlMessagePullRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlMessagePullRequest.Marshal(b, m, deterministic)
}
func (dst *ControlMessagePullRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlMessagePullRequest.Merge(dst, src)
}
func (m *ControlMessagePullRequest) XXX_Size() int {
	return xxx_messageInfo_ControlMessagePullRequest.Size(m)
}
func (m *ControlMessagePullRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlMessagePullRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ControlMessagePullRequest proto.InternalMessageInfo

func (m *ControlMessagePullRequest) GetMessagePayloads() [][]byte {
	if m != nil {
		return m.MessagePayloads
	}
	return nil
}

type ControlMessagePullResponse struct {
	// The actual control-request message payload(s).
	//
	MessagePayloads      [][]byte `protobuf:"bytes,1,rep,name=message_payloads,json=messagePayloads,proto3" json:"message_payloads,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ControlMessagePullResponse) Reset()         { *m = ControlMessagePullResponse{} }
func (m *ControlMessagePullResponse) String() string { return proto.CompactTextString(m) }
func (*ControlMessagePullResponse) ProtoMessage()    {}
func (*ControlMessagePullResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_proxy_e56ba876533ea36b, []int{1}
}
func (m *ControlMessagePullResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlMessagePullResponse.Unmarshal(m, b)
}
func (m *ControlMessagePullResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlMessagePullResponse.Marshal(b, m, deterministic)
}
func (dst *ControlMessagePullResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlMessagePullResponse.Merge(dst, src)
}
func (m *ControlMessagePullResponse) XXX_Size() int {
	return xxx_messageInfo_ControlMessagePullResponse.Size(m)
}
func (m *ControlMessagePullResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlMessagePullResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ControlMessagePullResponse proto.InternalMessageInfo

func (m *ControlMessagePullResponse) GetMessagePayloads() [][]byte {
	if m != nil {
		return m.MessagePayloads
	}
	return nil
}

type DataMessagePushRequest struct {
	// The actual data message payload(s).
	//
	MessagePayloads      [][]byte `protobuf:"bytes,1,rep,name=message_payloads,json=messagePayloads,proto3" json:"message_payloads,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataMessagePushRequest) Reset()         { *m = DataMessagePushRequest{} }
func (m *DataMessagePushRequest) String() string { return proto.CompactTextString(m) }
func (*DataMessagePushRequest) ProtoMessage()    {}
func (*DataMessagePushRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_proxy_e56ba876533ea36b, []int{2}
}
func (m *DataMessagePushRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataMessagePushRequest.Unmarshal(m, b)
}
func (m *DataMessagePushRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataMessagePushRequest.Marshal(b, m, deterministic)
}
func (dst *DataMessagePushRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataMessagePushRequest.Merge(dst, src)
}
func (m *DataMessagePushRequest) XXX_Size() int {
	return xxx_messageInfo_DataMessagePushRequest.Size(m)
}
func (m *DataMessagePushRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DataMessagePushRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DataMessagePushRequest proto.InternalMessageInfo

func (m *DataMessagePushRequest) GetMessagePayloads() [][]byte {
	if m != nil {
		return m.MessagePayloads
	}
	return nil
}

type DataMessagePushResponse struct {
	// Acknowledgements for earlier data messages pushed.
	//
	PushAcknowledgements []*PushAcknowledgement `protobuf:"bytes,1,rep,name=push_acknowledgements,json=pushAcknowledgements,proto3" json:"push_acknowledgements,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *DataMessagePushResponse) Reset()         { *m = DataMessagePushResponse{} }
func (m *DataMessagePushResponse) String() string { return proto.CompactTextString(m) }
func (*DataMessagePushResponse) ProtoMessage()    {}
func (*DataMessagePushResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_proxy_e56ba876533ea36b, []int{3}
}
func (m *DataMessagePushResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataMessagePushResponse.Unmarshal(m, b)
}
func (m *DataMessagePushResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataMessagePushResponse.Marshal(b, m, deterministic)
}
func (dst *DataMessagePushResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataMessagePushResponse.Merge(dst, src)
}
func (m *DataMessagePushResponse) XXX_Size() int {
	return xxx_messageInfo_DataMessagePushResponse.Size(m)
}
func (m *DataMessagePushResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DataMessagePushResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DataMessagePushResponse proto.InternalMessageInfo

func (m *DataMessagePushResponse) GetPushAcknowledgements() []*PushAcknowledgement {
	if m != nil {
		return m.PushAcknowledgements
	}
	return nil
}

type PushAcknowledgement struct {
	// The topic w.r.t. the proxy.
	//
	ServiceTopic string `protobuf:"bytes,1,opt,name=service_topic,json=serviceTopic,proto3" json:"service_topic,omitempty"`
	// The backend message broker handling the service topic.
	// Currently supported backends are "google", "kafka".
	//
	Backend string `protobuf:"bytes,2,opt,name=backend,proto3" json:"backend,omitempty"`
	// The topic w.r.t. the backend.
	//
	BackendTopic string `protobuf:"bytes,3,opt,name=backend_topic,json=backendTopic,proto3" json:"backend_topic,omitempty"`
	// The proxy's receive timestamp.
	//
	ReceiveTimestamp     *timestamp.Timestamp `protobuf:"bytes,4,opt,name=receive_timestamp,json=receiveTimestamp,proto3" json:"receive_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PushAcknowledgement) Reset()         { *m = PushAcknowledgement{} }
func (m *PushAcknowledgement) String() string { return proto.CompactTextString(m) }
func (*PushAcknowledgement) ProtoMessage()    {}
func (*PushAcknowledgement) Descriptor() ([]byte, []int) {
	return fileDescriptor_proxy_e56ba876533ea36b, []int{4}
}
func (m *PushAcknowledgement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushAcknowledgement.Unmarshal(m, b)
}
func (m *PushAcknowledgement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushAcknowledgement.Marshal(b, m, deterministic)
}
func (dst *PushAcknowledgement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushAcknowledgement.Merge(dst, src)
}
func (m *PushAcknowledgement) XXX_Size() int {
	return xxx_messageInfo_PushAcknowledgement.Size(m)
}
func (m *PushAcknowledgement) XXX_DiscardUnknown() {
	xxx_messageInfo_PushAcknowledgement.DiscardUnknown(m)
}

var xxx_messageInfo_PushAcknowledgement proto.InternalMessageInfo

func (m *PushAcknowledgement) GetServiceTopic() string {
	if m != nil {
		return m.ServiceTopic
	}
	return ""
}

func (m *PushAcknowledgement) GetBackend() string {
	if m != nil {
		return m.Backend
	}
	return ""
}

func (m *PushAcknowledgement) GetBackendTopic() string {
	if m != nil {
		return m.BackendTopic
	}
	return ""
}

func (m *PushAcknowledgement) GetReceiveTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.ReceiveTimestamp
	}
	return nil
}

func init() {
	proto.RegisterType((*ControlMessagePullRequest)(nil), "ControlMessagePullRequest")
	proto.RegisterType((*ControlMessagePullResponse)(nil), "ControlMessagePullResponse")
	proto.RegisterType((*DataMessagePushRequest)(nil), "DataMessagePushRequest")
	proto.RegisterType((*DataMessagePushResponse)(nil), "DataMessagePushResponse")
	proto.RegisterType((*PushAcknowledgement)(nil), "PushAcknowledgement")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ControlMessageProxyClient is the client API for ControlMessageProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControlMessageProxyClient interface {
	// Streaming control message pull from a control service-topic.
	//
	// Establishes a bi-directional stream with the server, which the server
	// uses to send control-request messages to the client and the client uses
	// to send back control-response messages to the server.
	//
	// Importantly, this method assumes there is only one subscriber pulling
	// messages from the control service-topic and server-side, each message is
	// deleted immediately after it is pulled. With this arrangement, there is
	// no need for the client to pre-obtain a stateful subscription and for the
	// server to keep track of subscription states.
	//
	StreamingPull(ctx context.Context, opts ...grpc.CallOption) (ControlMessageProxy_StreamingPullClient, error)
}

type controlMessageProxyClient struct {
	cc *grpc.ClientConn
}

func NewControlMessageProxyClient(cc *grpc.ClientConn) ControlMessageProxyClient {
	return &controlMessageProxyClient{cc}
}

func (c *controlMessageProxyClient) StreamingPull(ctx context.Context, opts ...grpc.CallOption) (ControlMessageProxy_StreamingPullClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ControlMessageProxy_serviceDesc.Streams[0], "/ControlMessageProxy/StreamingPull", opts...)
	if err != nil {
		return nil, err
	}
	x := &controlMessageProxyStreamingPullClient{stream}
	return x, nil
}

type ControlMessageProxy_StreamingPullClient interface {
	Send(*ControlMessagePullRequest) error
	Recv() (*ControlMessagePullResponse, error)
	grpc.ClientStream
}

type controlMessageProxyStreamingPullClient struct {
	grpc.ClientStream
}

func (x *controlMessageProxyStreamingPullClient) Send(m *ControlMessagePullRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controlMessageProxyStreamingPullClient) Recv() (*ControlMessagePullResponse, error) {
	m := new(ControlMessagePullResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ControlMessageProxyServer is the server API for ControlMessageProxy service.
type ControlMessageProxyServer interface {
	// Streaming control message pull from a control service-topic.
	//
	// Establishes a bi-directional stream with the server, which the server
	// uses to send control-request messages to the client and the client uses
	// to send back control-response messages to the server.
	//
	// Importantly, this method assumes there is only one subscriber pulling
	// messages from the control service-topic and server-side, each message is
	// deleted immediately after it is pulled. With this arrangement, there is
	// no need for the client to pre-obtain a stateful subscription and for the
	// server to keep track of subscription states.
	//
	StreamingPull(ControlMessageProxy_StreamingPullServer) error
}

func RegisterControlMessageProxyServer(s *grpc.Server, srv ControlMessageProxyServer) {
	s.RegisterService(&_ControlMessageProxy_serviceDesc, srv)
}

func _ControlMessageProxy_StreamingPull_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControlMessageProxyServer).StreamingPull(&controlMessageProxyStreamingPullServer{stream})
}

type ControlMessageProxy_StreamingPullServer interface {
	Send(*ControlMessagePullResponse) error
	Recv() (*ControlMessagePullRequest, error)
	grpc.ServerStream
}

type controlMessageProxyStreamingPullServer struct {
	grpc.ServerStream
}

func (x *controlMessageProxyStreamingPullServer) Send(m *ControlMessagePullResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controlMessageProxyStreamingPullServer) Recv() (*ControlMessagePullRequest, error) {
	m := new(ControlMessagePullRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ControlMessageProxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ControlMessageProxy",
	HandlerType: (*ControlMessageProxyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingPull",
			Handler:       _ControlMessageProxy_StreamingPull_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cmd/pb/proxy.proto",
}

// DataMessageProxyClient is the client API for DataMessageProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataMessageProxyClient interface {
	// Streaming data message push to a data service-topic.
	//
	// Establishes a bi-directional stream with the server, which the client
	// uses to send data messages to the server and the server uses to send
	// any acknowledgements back to the client. By default, no acknowledgements
	// are returned.
	//
	StreamingPush(ctx context.Context, opts ...grpc.CallOption) (DataMessageProxy_StreamingPushClient, error)
}

type dataMessageProxyClient struct {
	cc *grpc.ClientConn
}

func NewDataMessageProxyClient(cc *grpc.ClientConn) DataMessageProxyClient {
	return &dataMessageProxyClient{cc}
}

func (c *dataMessageProxyClient) StreamingPush(ctx context.Context, opts ...grpc.CallOption) (DataMessageProxy_StreamingPushClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataMessageProxy_serviceDesc.Streams[0], "/DataMessageProxy/StreamingPush", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataMessageProxyStreamingPushClient{stream}
	return x, nil
}

type DataMessageProxy_StreamingPushClient interface {
	Send(*DataMessagePushRequest) error
	Recv() (*DataMessagePushResponse, error)
	grpc.ClientStream
}

type dataMessageProxyStreamingPushClient struct {
	grpc.ClientStream
}

func (x *dataMessageProxyStreamingPushClient) Send(m *DataMessagePushRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataMessageProxyStreamingPushClient) Recv() (*DataMessagePushResponse, error) {
	m := new(DataMessagePushResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataMessageProxyServer is the server API for DataMessageProxy service.
type DataMessageProxyServer interface {
	// Streaming data message push to a data service-topic.
	//
	// Establishes a bi-directional stream with the server, which the client
	// uses to send data messages to the server and the server uses to send
	// any acknowledgements back to the client. By default, no acknowledgements
	// are returned.
	//
	StreamingPush(DataMessageProxy_StreamingPushServer) error
}

func RegisterDataMessageProxyServer(s *grpc.Server, srv DataMessageProxyServer) {
	s.RegisterService(&_DataMessageProxy_serviceDesc, srv)
}

func _DataMessageProxy_StreamingPush_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataMessageProxyServer).StreamingPush(&dataMessageProxyStreamingPushServer{stream})
}

type DataMessageProxy_StreamingPushServer interface {
	Send(*DataMessagePushResponse) error
	Recv() (*DataMessagePushRequest, error)
	grpc.ServerStream
}

type dataMessageProxyStreamingPushServer struct {
	grpc.ServerStream
}

func (x *dataMessageProxyStreamingPushServer) Send(m *DataMessagePushResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataMessageProxyStreamingPushServer) Recv() (*DataMessagePushRequest, error) {
	m := new(DataMessagePushRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DataMessageProxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DataMessageProxy",
	HandlerType: (*DataMessageProxyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingPush",
			Handler:       _DataMessageProxy_StreamingPush_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cmd/pb/proxy.proto",
}

func init() { proto.RegisterFile("cmd/pb/proxy.proto", fileDescriptor_proxy_e56ba876533ea36b) }

var fileDescriptor_proxy_e56ba876533ea36b = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x51, 0x4f, 0xea, 0x30,
	0x18, 0x86, 0xcf, 0x80, 0x9c, 0x93, 0x53, 0x20, 0xe2, 0x40, 0x99, 0xf3, 0x42, 0x32, 0x6f, 0xe6,
	0x4d, 0x67, 0xe6, 0x2f, 0x50, 0x8c, 0xe8, 0x85, 0x86, 0x4c, 0xae, 0x8c, 0xc9, 0xd2, 0x6d, 0x9f,
	0x63, 0x61, 0x5b, 0xeb, 0xda, 0xa1, 0xfc, 0x3d, 0x7f, 0x99, 0xd9, 0x56, 0x88, 0x08, 0x5c, 0xe8,
	0xdd, 0xfa, 0xf4, 0x7b, 0xdf, 0x76, 0x79, 0x8a, 0x54, 0x3f, 0x09, 0x2c, 0xe6, 0x59, 0x2c, 0xa3,
	0xef, 0x0b, 0xcc, 0x32, 0x2a, 0xa8, 0x7e, 0x12, 0x52, 0x1a, 0xc6, 0x60, 0x95, 0x2b, 0x2f, 0x7f,
	0xb1, 0x44, 0x94, 0x00, 0x17, 0x24, 0x61, 0xd5, 0x80, 0x71, 0x83, 0x8e, 0x86, 0x34, 0x15, 0x19,
	0x8d, 0xef, 0x81, 0x73, 0x12, 0xc2, 0x38, 0x8f, 0x63, 0x07, 0x5e, 0x73, 0xe0, 0x42, 0x3d, 0x43,
	0x9d, 0xa4, 0xa2, 0x2e, 0x23, 0x8b, 0x98, 0x92, 0x80, 0x6b, 0xca, 0xa0, 0x6e, 0xb6, 0x9c, 0x3d,
	0xc9, 0xc7, 0x12, 0x1b, 0x23, 0xa4, 0x6f, 0xeb, 0xe1, 0x8c, 0xa6, 0x1c, 0x7e, 0x52, 0x34, 0x44,
	0x87, 0xd7, 0x44, 0x90, 0x55, 0x0b, 0x9f, 0xfe, 0xe2, 0x36, 0x01, 0xea, 0x6f, 0x94, 0xc8, 0xab,
	0xdc, 0xa1, 0x03, 0x96, 0xf3, 0xa9, 0x4b, 0xfc, 0x59, 0x4a, 0xdf, 0x62, 0x08, 0x42, 0x48, 0x20,
	0x15, 0x55, 0x55, 0xd3, 0xee, 0xe1, 0x62, 0xfa, 0x72, 0x7d, 0xd3, 0xe9, 0xb1, 0x4d, 0xc8, 0x8d,
	0x0f, 0x05, 0x75, 0xb7, 0x4c, 0xab, 0xa7, 0xa8, 0xcd, 0x21, 0x9b, 0x47, 0x3e, 0xb8, 0x82, 0xb2,
	0xc8, 0xd7, 0x94, 0x81, 0x62, 0xfe, 0x77, 0x5a, 0x12, 0x4e, 0x0a, 0xa6, 0x6a, 0xe8, 0x9f, 0x47,
	0xfc, 0x19, 0xa4, 0x81, 0x56, 0x2b, 0xb7, 0x97, 0xcb, 0x22, 0x2e, 0x3f, 0x65, 0xbc, 0x5e, 0xc5,
	0x25, 0xac, 0xe2, 0x23, 0xb4, 0x9f, 0x81, 0x0f, 0xd1, 0x1c, 0xdc, 0x95, 0x52, 0xad, 0x31, 0x50,
	0xcc, 0xa6, 0xad, 0xe3, 0x4a, 0x3a, 0x5e, 0x4a, 0xc7, 0x93, 0xe5, 0x84, 0xd3, 0x91, 0xa1, 0x15,
	0xb1, 0x01, 0x75, 0xbf, 0x89, 0x2b, 0x9e, 0x8f, 0xfa, 0x80, 0xda, 0x8f, 0x22, 0x03, 0x92, 0x44,
	0x69, 0x58, 0xa8, 0x54, 0x75, 0xbc, 0xf3, 0x9d, 0xe8, 0xc7, 0x78, 0xb7, 0x7b, 0xe3, 0x8f, 0xa9,
	0x9c, 0x2b, 0xf6, 0x33, 0xea, 0x7c, 0x35, 0x52, 0x9e, 0x71, 0xbb, 0x76, 0x06, 0x9f, 0xaa, 0x7d,
	0xbc, 0x5d, 0xbd, 0xae, 0xe1, 0x1d, 0x3a, 0xab, 0xf6, 0xab, 0xc6, 0x53, 0x8d, 0x79, 0xde, 0xdf,
	0xf2, 0x87, 0x2f, 0x3e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x77, 0x19, 0xac, 0x55, 0x09, 0x03, 0x00,
	0x00,
}
